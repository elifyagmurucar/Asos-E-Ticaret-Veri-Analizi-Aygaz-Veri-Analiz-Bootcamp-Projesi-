{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\n\n# Veri setini yükleyelim\ndata = pd.read_csv(\"kaggle/datasets/trainingdatapro/asos-e-commerce-dataset-30845-productsc/Asos_Df_Concat.csv\")\n\n# İlk 5 satırı görelim\nprint(data.head())\n\n# Veri setinin boyutunu görelim\nprint(f\"Veri setinin boyutu: {data.shape}\")\n\n# Veri tiplerini inceleyelim\nprint(data.info())\n\n# Eksik değerleri kontrol edelim\nprint(data.isnull().sum())\n\n# Temel istatistiksel özet\nprint(data.describe())\n\n# Eksik değerlere göz atalım\nmissing_values = data.isnull().sum()\nprint(missing_values[missing_values > 0])\n\n# Örnek: Eksik değerleri dolduralım\ndata['rating'] = data['rating'].fillna(data['rating'].median())  # Rating eksikse medyan ile doldur\ndata['stock'] = data['stock'].fillna(0)  # Stok eksikse 0 olarak işaretle\ndata = data.dropna(subset=['price'])  # Fiyatı eksik olan ürünleri çıkar\n\nprint(data.isnull().sum())  # Kontrol edelim\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Fiyat dağılımını inceleyelim\nplt.figure(figsize=(10, 6))\nsns.histplot(data['price'], kde=True, bins=30, color='blue')\nplt.title(\"Fiyat Dağılımı\")\nplt.xlabel(\"Fiyat\")\nplt.ylabel(\"Frekans\")\nplt.show()\n\n# Fiyat ve derecelendirme ilişkisi\nplt.figure(figsize=(10, 6))\nsns.scatterplot(x='price', y='rating', data=data, alpha=0.7)\nplt.title(\"Fiyat ve Derecelendirme İlişkisi\")\nplt.xlabel(\"Fiyat\")\nplt.ylabel(\"Derecelendirme\")\nplt.show()\n\n\n# Kategori bazında fiyat ortalamaları\ncategory_price = data.groupby('category')['price'].mean().sort_values(ascending=False)\n\nprint(\"Kategorilere Göre Ortalama Fiyatlar:\")\nprint(category_price)\n\n# Görselleştirme\nplt.figure(figsize=(12, 6))\ncategory_price.plot(kind='bar', color='green')\nplt.title(\"Kategorilere Göre Ortalama Fiyatlar\")\nplt.xlabel(\"Kategori\")\nplt.ylabel(\"Ortalama Fiyat\")\nplt.show()\n\n# Stok dağılımı\nstock_by_category = data.groupby('category')['stock'].sum().sort_values(ascending=False)\n\nprint(\"Kategorilere Göre Toplam Stok:\")\nprint(stock_by_category)\n\n# Görselleştirme\nplt.figure(figsize=(12, 6))\nstock_by_category.plot(kind='bar', color='orange')\nplt.title(\"Kategorilere Göre Toplam Stok\")\nplt.xlabel(\"Kategori\")\nplt.ylabel(\"Toplam Stok\")\nplt.show()\n\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"","metadata":{}}]}